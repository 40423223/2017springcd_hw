<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>40423223 - 2017Spring 協同產品設計實習</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2017-06-21T11:00:00+08:00</updated><entry><title>Week18 20170621</title><link href="./Week%2018.html" rel="alternate"></link><published>2017-06-21T11:00:00+08:00</published><updated>2017-06-21T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-06-21:./Week 18.html</id><summary type="html">&lt;p&gt;期末報告&lt;/p&gt;


&lt;p&gt;期末每一位同學上台報告及自評&lt;/p&gt;</summary><category term="Brython"></category></entry><entry><title>Week17 20170614</title><link href="./Week%2017.html" rel="alternate"></link><published>2017-06-14T11:00:00+08:00</published><updated>2017-06-14T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-06-14:./Week 17.html</id><summary type="html">&lt;p&gt;期末練習&lt;/p&gt;


&lt;p&gt;1.
solvespace 檔案推送&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/iQnTWvw9fAc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/w17/40423223.html"width="600"height="600"&gt;&lt;/iframe&gt;

&lt;p&gt;2.
solvespace 2D 繪圖 程式碼&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/bgXRNxkYpD0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;p&gt;&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;
&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

# 設定畫線參數 
    def create_line(self, x1, y1, x2, y2, width=3, fill="#54fff6"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    def create_line2(self, x1, y1, x2, y2, width=3, fill="#54ff5f"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    def create_line3(self, x1, y1, x2, y2, width=3, fill="#f354ff"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()


    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):

        rp = 250
        imax = 15
        m=2*rp/n
        a=m
        d=1.25*m
        ra=rp+a


        # self.create_line(起點X, 起點Y, 終點X, 終點Y)
        self.create_line2(413.3048144374, 177.2479966577, 290.7895389317, 388.5956281791)
        self.create_line3(413.3048144374, 177.2479966577, 511.1693764644, 347.3719332885)
        self.create_line2(227.6504481759, 387.8209664272, 346.5192837924, 389.2793836984)
        self.create_line3(227.6504481759, 387.8209664272, 284.1356468731, 456.3670007375)
        self.create_line2(284.1356468731, 456.3670007375, 346.5192837924,389.2793836984)
        self.create_line3(427.9934803377, 380.2213155970, 575.0433682823, 322.1456204442)
        self.create_line2(575.0433682823, 322.1456204442, 520.3793963799,404.4149916970)
        self.create_line3(520.3793963799,404.4149916970, 427.9934803377, 380.2213155970)
        self.create_line2(226.2012780153,497.9557157416, 591.7048592847, 405.9036159059)
        self.create_line3(226.2012780153,497.9557157416, 589.5113097233 , 497.9557157416)



        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(-9, 10, +1):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)   
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;p&gt;3.
子模組建立與運用&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Jpw_npHxvRY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;4.Solvespace 近端零組件繪圖&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/leaxPwJajws" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src="./../data/w17/tow lag.html"width="600"height="600"&gt;&lt;/iframe&gt;

&lt;ol&gt;
&lt;li&gt;Solvespace 零件轉入 V-rep&lt;/li&gt;
&lt;/ol&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kVrZna1zOi8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;6.行走機構模擬與實作過程負責任務&lt;/p&gt;
&lt;p&gt;第四組行走機構: &lt;a href="https://cad.onshape.com/documents/22983a081500fe849778c5bf/w/e995a739d17fc17c8aadca37/e/4c547c1146ee056afb594f42"&gt;第四組行走機構&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;型走機構作動影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sg_zzzOOMuk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;以下為我負責部分&lt;/h2&gt;

&lt;p&gt;一.小組共同完成
1.設計行走機構
2.組合行走機構&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/puQdOFzjImM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;二.我負責部分
1.購買組合材料
2.繪製零件&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9XBgsWozXWA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/h87KcQzMi-E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;7.上傳 Fossil SCM 倉儲&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/21z89AD8ugo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Brython"></category></entry><entry><title>Week15 20170531</title><link href="./Week%2015.html" rel="alternate"></link><published>2017-05-31T11:00:00+08:00</published><updated>2017-05-31T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-05-31:./Week 15.html</id><summary type="html">&lt;p&gt;w15齒輪練習&lt;/p&gt;


&lt;p&gt;w15 齒輪練習練習&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/XQGuqdCYD1Y" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖正齒輪--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.fillStytle = "#0aff53"
ctx.font = "30px ScriptS"
ctx.fillText("40423223",x-50,y)
ctx.stroke()

&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖半齒型正齒輪--&gt;

&lt;canvas id="onegear2" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx-rp, midy, midx+rp, midy)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(-9,10,+1):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear2']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 250
# 齒數
n = 36
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")

ctx.beginPath()
ctx.fillStytle = "#0aff53"
ctx.font = "30px ScriptS"
ctx.fillText("40423223",x-50,y)
ctx.stroke()

&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>Week14 20170524</title><link href="./Week%2014.html" rel="alternate"></link><published>2017-05-24T11:00:00+08:00</published><updated>2017-05-24T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-05-24:./Week 14.html</id><summary type="html">&lt;p&gt;自行假設主機
&lt;/p&gt;
&lt;p&gt;各組自行架設主機,使用IPv6的網路,若要更改網路可以到設定那,設定proxy&lt;/p&gt;</summary><category term="Brython"></category></entry><entry><title>Week13 20170517</title><link href="./Week%2013.html" rel="alternate"></link><published>2017-05-17T11:00:00+08:00</published><updated>2017-05-17T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-05-17:./Week 13.html</id><summary type="html">&lt;p&gt;第四組行走機構&lt;/p&gt;


&lt;p&gt;第四組行走機構: &lt;a href="https://cad.onshape.com/documents/22983a081500fe849778c5bf/w/e995a739d17fc17c8aadca37/e/4c547c1146ee056afb594f42"&gt;第四組行走機構&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;型走機構作動影片&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sg_zzzOOMuk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;以下為我負責部分&lt;/h2&gt;

&lt;p&gt;一.小組共同完成
1.設計行走機構
2.組合行走機構&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/puQdOFzjImM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;二.我負責部分
1.購買組合材料
2.繪製零件&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/9XBgsWozXWA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/h87KcQzMi-E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="Brython"></category></entry><entry><title>Week12 20170510</title><link href="./Week%2012.html" rel="alternate"></link><published>2017-05-10T11:00:00+08:00</published><updated>2017-05-10T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-05-10:./Week 12.html</id><summary type="html">&lt;p&gt;2D 正齒輪傳動繪圖 2D 靜態網際繪圖&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="800" height="20"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 53
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='800' height='750'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 17
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)
&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>Week11 20170503</title><link href="./Week%2011.html" rel="alternate"></link><published>2017-05-03T11:00:00+08:00</published><updated>2017-05-03T11:00:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-05-03:./Week 11.html</id><summary type="html">&lt;p&gt;閱讀心得 two books&lt;/p&gt;


&lt;p&gt;1.閱讀心得 two books&lt;/p&gt;
&lt;p&gt;Onshape's Greatest Tech Tips– Volume 1&lt;/p&gt;

&lt;p&gt;心得:&lt;/p&gt;

&lt;p&gt;藉由此篇文章中可了解on shape每個功能在產品設計中的便利之處，像是時間軸設定可以清楚檢視每階段時間的作品差異性，並可以隨時呼叫出來修改，對於隨時要滿足各市場的產品設計時非常方便， 並可以利用評論功能在作品底下留言，比起以往使用截圖或檔案傳送討論而言快速許多，可以在個體特徵上添加註釋也解省了許多解釋的時間，從這些小地方可看出on shape對於產品設計團隊合作上的提供了許多便利之處。&lt;/p&gt;
&lt;p&gt;An Introduction to Agile Product Design&lt;/p&gt;

&lt;p&gt;心得:&lt;/p&gt;

&lt;p&gt;對於現代產品設計強調速度、創新，在這些競爭中越能越快抓住市場與世界趨勢就越有優勢，因此敏捷的產品設計在這時代是不可或缺的能力，由此可知設計使用的軟體越偏向快速、成本低、功能完備、方便討論的趨勢，若能縮短產品設計與發佈的時間，不但能早搶占市場優勢，成為新潮產品，也越能搶佔專利權，隨著團隊合作模式的改變，不再像以前的團隊一樣階段性接著畫，現代為節省時間都強調，「同步處理」，”on shape”就出現了，一方面讓團隊能隨時注意組員畫圖進度並且若要組裝可以馬上應用，一方面因為是網頁式開啟，比起以往需要帶著軟體到處跑，現在只需要有網路皆可隨時開啟討論。
總心得:看完兩篇文章後除了對於英文能力的增強外，對於on shpae在產品設計中的便利與重要性也有不同的認識，並也了解現代產品設計的趨勢與未來軟體的轉變趨勢，不敢說現在的on shape能完全取代CAD，但相信在未來一步步改善後，不久的將來有機會成為產品設計中的主流。&lt;/p&gt;</summary><category term="Brython"></category></entry><entry><title>Week9 期中報告 20170419</title><link href="./Week%209.html" rel="alternate"></link><published>2017-04-19T11:20:00+08:00</published><updated>2017-04-19T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-04-19:./Week 9.html</id><summary type="html">&lt;p&gt;1.Fossil Server 實習查驗&lt;/p&gt;
&lt;p&gt;2.路徑圖&lt;/p&gt;
&lt;p&gt;3.四連桿四足行走機構 &lt;/p&gt;
&lt;p&gt;4.分組協同零件展示&lt;/p&gt;


&lt;p&gt;1.Fossil Server 實習查驗&lt;/p&gt;
&lt;p&gt;&lt;a href = " https://mde2a2.kmol.info/midterm/bg4/index "&gt; bg4 期中報告 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.期中報告Solvespace &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vH-bFP-K9Ss" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫四連桿 trace point 路徑--&gt;

&lt;canvas id="fourbar" width="800" height="600"&gt;&lt;/canvas&gt;

&lt;div id="container1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
# 準備繪圖畫布
canvas = doc["fourbar"]
container1 = doc['container1']
ctx = canvas.getContext("2d")

fourbar_data = open("./../40423223/40423223.csv").read()
fourbar_list = fourbar_data.splitlines()
#container1 &lt;= fourbar_list[0]
# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 利用 transform 將 y 座標反轉, 且 offset canvas.height
# (X scale, X skew, Y skew, Y scale, X offset, Y offset)
# 配合圖形位置進行座標轉換
ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100)
# 畫出 x 與 y 座標線
# 各座標值放大 5 倍
ratio = 5
ctx.moveTo(0, 0)
ctx.lineTo(-30*ratio, 0)
start_point = fourbar_list[0].split(",")
ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio)
count = 0
for data in fourbar_list[1:]:
    point = data.split(",")
    #count = count + 1
    #container1 &lt;= str(count) + ":" + point[0] + "," + point[1]
    #container1 &lt;= html.BR()
    ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;p&gt;3.四連桿四足行走機構&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/yfa1upfbEaw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;四連桿四足行走機構&lt;/p&gt;
&lt;p&gt;&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/aUHChaeVXN8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</summary><category term="teach"></category></entry><entry><title>Week7 20170405</title><link href="./Week%207.html" rel="alternate"></link><published>2017-04-05T11:20:00+08:00</published><updated>2017-04-05T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-04-05:./Week 7.html</id><summary type="html">&lt;p&gt;onshape 八連桿&lt;/p&gt;


&lt;h1&gt;onshape畫出八連桿&lt;/h1&gt;

&lt;h2&gt;八連桿零件繪製&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ljewuvx7Ov8" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/SW_kHnzRFwE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;八連桿組合&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/iCElIDTKqxs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;八連桿導入v-rep作動&lt;/h1&gt;

&lt;p&gt;尚未完成&lt;/p&gt;
&lt;h1&gt;心得&lt;/h1&gt;

&lt;p&gt;onshape部分零件與組裝部分已經完成，因為已經做了很多次相關作業所以跟第一次組裝比起來快捷鍵跟各方面的使用也非常流暢，目前正在匯入vrep，影片部分會在之後補上傳&lt;/p&gt;</summary><category term="teach"></category></entry><entry><title>Week6 20170329</title><link href="./Week%206.html" rel="alternate"></link><published>2017-03-29T11:20:00+08:00</published><updated>2017-03-29T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-03-29:./Week 6.html</id><summary type="html">&lt;p&gt;四連桿組合
四連桿導入v-rep作動
&lt;/p&gt;
&lt;h1&gt;onshape畫出四連桿&lt;/h1&gt;

&lt;h2&gt;四連桿零件繪製&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1rtwVG1dh9g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;四連桿組合&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/VYxBNBt52jo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;四連桿導入v-rep作動&lt;/h1&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/GMay44X_vgg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;心得&lt;/h1&gt;

&lt;h2&gt;把四連桿導入v-rep的過程遇到一些困難例如把軸放入後一職無法放入指定的位置後發現原來是沒有點到要放到的位置,我覺得還是不夠熟練v-rep&lt;/h2&gt;</summary><category term="teach"></category></entry><entry><title>Week5 20170322</title><link href="./Week%205.html" rel="alternate"></link><published>2017-03-22T11:20:00+08:00</published><updated>2017-03-22T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-03-22:./Week 5.html</id><summary type="html">&lt;p&gt;單連桿匯入V-rep作動&lt;/p&gt;


&lt;h1&gt;單連桿匯入V-rep作動&lt;/h1&gt;

&lt;h2&gt;設定單連桿匯入v-rep作動&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Frm8_Lsx9xM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h1&gt;心得&lt;/h1&gt;

&lt;h2&gt;一開始設定時一直失敗原來是我忘記設定轉的角度這一次利用v-rep學會了如何在v-rep裡面模擬作動,以後需要模擬機構作動就可以使用v-rep了,但是剛開始使用v-rep還是有許多的地方感覺還是需要摸索&lt;/h2&gt;</summary><category term="teach"></category></entry><entry><title>Week4 20170315</title><link href="./Week%204.html" rel="alternate"></link><published>2017-03-15T11:20:00+08:00</published><updated>2017-03-15T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-03-15:./Week 4.html</id><summary type="html">&lt;p&gt;翻譯
Fossil SCM 倉儲
單連桿製作
&lt;/p&gt;
&lt;h2&gt;Fossil SCM 倉儲&lt;/h2&gt;

&lt;p&gt;各組在 https://mde2a2.kmol.info 主機上建立 cdbg4&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mde2a2.kmol.info/cdbg4/wcontent"&gt;cdbg4&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;hyperworks 14 4翻譯 40423223 40439221&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/gZkutmx1txc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;以下為我負責部分&lt;/h2&gt;

&lt;p&gt;i'm really excited about the new graphics 
that are comming out in hyper mentionthis release&lt;/p&gt;
&lt;p&gt;我真的很興奮的介紹新圖形出現的這個版本&lt;/p&gt;
&lt;p&gt;we went back to the drawing board on graphics &lt;/p&gt;
&lt;p&gt;我們看到這個繪圖板上的圖形&lt;/p&gt;
&lt;p&gt;now we're really urilizing the full capabilities of the graphics cards  on any system &lt;/p&gt;
&lt;p&gt;現在我們能在任何系統上用到顯卡全部功能&lt;/p&gt;
&lt;p&gt;really and the new system has much better quality graphics &lt;/p&gt;
&lt;p&gt;真的和新系統有更好的質量圖形&lt;/p&gt;
&lt;p&gt;and we have features now like as you zoom close into your model the mesh lines appear &lt;/p&gt;
&lt;p&gt;像我們現在的功能就是當你靠近放大模型就會有內部格線出現&lt;/p&gt;
&lt;p&gt;but as you zoom out rather than getting a black model &lt;/p&gt;
&lt;p&gt;而當你縮小不再是一個黑色模型&lt;/p&gt;
&lt;p&gt;the mesh lines fade and now you're actually selecting and working at a hard level rather than an element leve &lt;/p&gt;
&lt;p&gt;內部格線會漸漸消失，但你現在實際上是選擇工作水平，而不是一個元素水平&lt;/p&gt;
&lt;h2&gt;單連桿製作&lt;/h2&gt;

&lt;h2&gt;零件一&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wlOfKTUmetk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件二&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IvmwuJai5_E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件三&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vFvmKUre5oo" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;組合&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/7tERu7d2HM0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;導入v-rep&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2jZEmeF_2ew" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;心得&lt;/h2&gt;

&lt;h2&gt;我覺得小組倉儲的概念很實用這樣我們可以很清楚知道每一個資訊的細節與後來更動的部分,而且也可以知道每一個人的想法&lt;/h2&gt;</summary><category term="teach"></category></entry><entry><title>Week3 20170310</title><link href="./Week%203.html" rel="alternate"></link><published>2017-03-10T11:20:00+08:00</published><updated>2017-03-10T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-03-10:./Week 3.html</id><summary type="html">&lt;p&gt;小組 創Fossil SCM&lt;/p&gt;


&lt;h2&gt;小組 創Fossil SCM&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/HI24oKKnF8k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;40423223Slvespace組立轉入v rep&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PkUgnNXSuGE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;40423223onshape組立轉入v rep&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Q-vzhhbOGhE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;40423223Solvespace加入三角形頂點運動軌跡&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/PzDrsI5bmr4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;心得:&lt;/h2&gt;

&lt;h1&gt;這一次的作業有去了解到v-rep這個程式在做甚麼以後一定可以幫助我模擬一些機構上的運動就不怕做出來的東西不能作動了&lt;/h1&gt;</summary><category term="teach"></category></entry><entry><title>Week2 20170304</title><link href="./Week%202.html" rel="alternate"></link><published>2017-03-04T11:20:00+08:00</published><updated>2017-03-04T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-03-04:./Week 2.html</id><summary type="html">&lt;p&gt;練習 solvespace,onshap 四連桿機構
&lt;/p&gt;
&lt;h2&gt;  四連桿機構 solvespace,onshape &lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/g43TawOsFho" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件一 solvespace&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/1fKwLav-hPA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件二 solvespace&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/MdVrvzSIqWg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件三 solvespace&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/vCOcjH_3Uas" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;組合 solvespace&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6y4ZQHjXwHA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件一 onshape&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Q6BSoaGcEkg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件二 onshape&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IeZdbXNIyeQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;零件三 onshape&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/mhhzlM6BG3U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;組合 onshape&lt;/h2&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/mhhzlM6BG3U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;心得:&lt;/h2&gt;

&lt;h1&gt;複習了很多solvespace,onshape功能也恢復了很多指令的記憶&lt;/h1&gt;</summary><category term="teach"></category></entry><entry><title>Week1 20170228</title><link href="./Week%201.html" rel="alternate"></link><published>2017-02-28T11:20:00+08:00</published><updated>2017-02-28T11:20:00+08:00</updated><author><name>40423223</name></author><id>tag:,2017-02-28:./Week 1.html</id><summary type="html">&lt;p&gt;第一堂課 複習了一些之前的指令
&lt;/p&gt;
&lt;p&gt;利用ipconfig/all的指令去尋找IP位置再去stunnel.conf修改IP&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/YRcfFBJLCaU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;心得:&lt;/h2&gt;

&lt;h1&gt;之前一直忘記是哪一個指令可以尋找IP這一次一定要記起來&lt;/h1&gt;</summary><category term="teach"></category></entry></feed>